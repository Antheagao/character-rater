// Datasource and client
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

// User database information
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String    @unique
  avatar        String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  likes         Like[]
  comments      Comment[]
  sessions      Session[]

  @@map("users")
}

// Session management
model Session {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())

  @@map("sessions")
}

// like | dislike system
model Like {
  id          String    @id @default(cuid())
  userId      String
  characterId Int
  value       Int
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character   Character @relation(fields: [characterId], references: [malId], onDelete: Cascade)

  @@unique([userId, characterId])
  @@index([characterId])
  @@index([userId])
  @@map("likes")
}

// Comment system
model Comment {
  id          String    @id @default(cuid())
  userId      String
  characterId Int
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [malId], onDelete: Cascade)

  @@index([characterId])
  @@index([userId])
  @@index([createdAt])
  @@map("comments")
}

// Characters Information
model Character {
  malId       Int       @id 
  name        String 
  nameKanji   String?
  gender      String?
  url         String?
  about       String?   @db.Text
  nicknames   String[]  @default([])
  imagesJson  Json 
  favorites   Int?
  rawJson     Json
  updatedAt   DateTime  @updatedAt

  // Relations
  animeRoles  CharacterAnime[]
  mangaRoles  CharacterManga[]
  likes       Like[]
  comments    Comment[]

  @@index([name])
  @@index([favorites])
} 

// Anime information
model Anime {
  malId       Int       @id
  title       String 
  titleEnglish String?
  titleJapanese String?
  url         String?
  imagesJson  Json
  synopsis    String?   @db.Text
  episodes    Int?
  status      String?
  score       Float?
  rank        Int?
  popularity  Int?
  favorites   Int?
  type        String?
  source      String?
  rating      String?
  genres      String[]
  studios     String[]
  season      String?
  year        Int?
  duration    String?
  
  rawJson     Json?
  updatedAt   DateTime  @updatedAt

  characters  CharacterAnime[]
  @@index([title])
  @@index([score])
  @@index([rank])
  @@index([popularity])
  @@index([status])
  @@index([type])
  @@index([year])
}

// Manga information  
model Manga {
  malId       Int       @id
  title       String 
  titleEnglish String?
  titleJapanese String?
  url         String?
  imagesJson  Json
  // âœ… ADD THESE FIELDS:
  synopsis    String?   @db.Text
  chapters    Int?
  volumes     Int?
  status      String?
  score       Float?
  rank        Int?
  popularity  Int?
  favorites   Int?
  type        String?
  genres      String[]
  authors     String[]
  serialization String? 
  year        Int?   

  rawJson     Json?
  updatedAt   DateTime  @updatedAt

  characters  CharacterManga[]
  @@index([title])
  @@index([score])
  @@index([rank])
  @@index([popularity])
  @@index([status])
  @@index([type])
  @@index([year])
}

// Join characters and anime tables
model CharacterAnime {
  characterId Int
  animeId     Int 
  role        String 

  character   Character @relation(fields: [characterId], references: [malId], onDelete: Cascade)
  anime       Anime     @relation(fields: [animeId], references: [malId], onDelete: Cascade)

  @@id([characterId, animeId])
  @@index([animeId])
  @@index([role])
}

// Join characters and manga tables
model CharacterManga {
  characterId Int
  mangaId     Int
  role        String

  character   Character @relation(fields: [characterId], references: [malId], onDelete: Cascade)
  manga       Manga     @relation(fields: [mangaId], references: [malId], onDelete: Cascade)

  @@id([characterId, mangaId])
  @@index([mangaId])
  @@index([role])
}

// Key-value meta
model CrawlerMeta {
  key   String @id
  value String
}
